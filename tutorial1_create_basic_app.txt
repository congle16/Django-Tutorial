BASIC POLL APPLICATION

1. CREATING A PROJECT
    Create a project folder, such as hello_django
        - sudo apt-get install python3-venv    # If needed
        - python3 -m venv .venv
        - source .venv/bin/activate
        
        - python -m pip install --upgrade pip
        
        - python -m pip install django

    From the command line, cd into a directory where you’d like to store your code, 
    then run the following command:
        $ django-admin startproject mysite

    Let’s look at what startproject created:
        mysite/
            manage.py
            mysite/
                __init__.py
                settings.py
                urls.py
                asgi.py
                wsgi.py

        - The outer mysite/ root directory is a container for your project. 
        Its name doesn’t matter to Django; you can rename it to anything you like.
        - manage.py: A command-line utility that lets you interact with this Django project in various ways.
        - The inner mysite/ directory is the actual Python package for your project. 
        Its name is the Python package name you’ll need to use to import anything inside it (e.g. mysite.urls).
        - mysite/__init__.py: An empty file that tells Python that this directory should be considered a Python package. 
        - mysite/settings.py: Settings/configuration for this Django project. 
        - mysite/urls.py: The URL declarations for this Django project; a “table of contents” of your Django-powered site.
        - mysite/asgi.py: An entry-point for ASGI-compatible web servers to serve your project. 
        - mysite/wsgi.py: An entry-point for WSGI-compatible web servers to serve your project. 

    Let’s verify your Django project works. 
    Change into the outer mysite directory, if you haven’t already, and run the following commands:
        $ python manage.py runserver

    If you want to change the server’s port, pass it as a command-line argument. 
    For instance, this command starts the server on port 8080:
        $ python manage.py runserver 8080

2. CREATING THE POLLS APP 
    (What’s the difference between a project and an app? 
    An app is a web application that does something – e.g., a blog system, a database of public records or a small poll app. 
    A project is a collection of configuration and apps for a particular website. 
    A project can contain multiple apps. An app can be in multiple projects.)

    Your apps can live anywhere on your Python path. 
    In this tutorial, we’ll create our poll app in the same directory as your manage.py file 
    so that it can be imported as its own top-level module, rather than a submodule of mysite.
    To create your app, make sure you’re in the same directory as manage.py and type this command:
        $ python manage.py startapp polls

    That’ll create a directory polls, which is laid out like this:
        polls/
            __init__.py
            admin.py
            apps.py
            migrations/
                __init__.py
            models.py
            tests.py
            views.py

3. WRITE FIRST VIEW
    Let’s write the first view. Open the file polls/views.py and write the first view.
    To call the view, we need to map it to a URL - and for this we need a URLconf.
    To create a URLconf in the polls directory, create a file called urls.py, it in same 
    directory as views.py

    In the polls/urls.py file include the following code:
        from django.urls import path

        from . import views

        urlpatterns = [
            path('', views.index, name='index'),
        ]        

    The next step is to point the root URLconf at the polls.urls module. 
    In mysite/urls.py, add an import for django.urls.include and insert an include() in the urlpatterns list, so you have:
        from django.contrib import admin
        from django.urls import include, path

        urlpatterns = [
            path('polls/', include('polls.urls')),
            path('admin/', admin.site.urls),
        ]

    The include() function allows referencing other URLconfs. 
    Whenever Django encounters include(), it chops off whatever part of the URL matched up to that point and sends the remaining string to the included URLconf for further processing.

    The idea behind include() is to make it easy to plug-and-play URLs. 
    Since polls are in their own URLconf (polls/urls.py), they can be placed under “/polls/”, or under “/fun_polls/”, or under “/content/polls/”, or any other path root, and the app will still work.

** The path()
    The path() function is passed four arguments, two required: route and view, 
    and two optional: kwargs, and name. At this point, it’s worth reviewing what these arguments are for.

    + path() argument: route
        route is a string that contains a URL pattern. 
        When processing a request, Django starts at the first pattern in urlpatterns and makes its way down the list, 
        comparing the requested URL against each pattern until it finds one that matches.

        Patterns don’t search GET and POST parameters, or the domain name. 
        For example, in a request to https://www.example.com/myapp/, the URLconf will look for myapp/. 
        In a request to https://www.example.com/myapp/?page=3, the URLconf will also look for myapp/.

    + path() argument: view
        When Django finds a matching pattern, 
        it calls the specified view function with an HttpRequest object as the first argument 
        and any “captured” values from the route as keyword arguments. 

    + path() argument: name
        Naming your URL lets you refer to it unambiguously from elsewhere in Django, especially from within templates. 
        This powerful feature allows you to make global changes to the URL patterns of your project while only touching a single file.










